# Copyright (c) Meta, Inc. and its affiliates.

from types import ModuleType

from Crypto.Cipher import PKCS1_OAEP

from enclave.gateway.nsm import NitroGateway
from enclave.service.key_management import KeyManagementService


class OneDockerRunnerService:
    """OneDocker Runner Service integration with Nitro SDK"""

    kms: KeyManagementService
    nsm: NitroGateway

    def __init__(self, kms: KeyManagementService):
        """Initialize with a provided KMS. Creates an NSM gateway"""
        self.kms = kms
        self.nsm = NitroGateway()

    def _get_public_key(self) -> bytes:
        return self.kms.get_public_key()

    def get_attestation_document(self) -> bytes:
        """Get attestation document generated by NSM and signed with public key"""
        return self.nsm.get_attestation_document(self._get_public_key())

    def decrypt_data(self, data: bytes, cipher_lib: ModuleType = PKCS1_OAEP) -> bytes:
        """Decrypt data. cipher_lib should have a new(...) method.
        Currently only supports PKCS1_OAEP."""
        cipher = cipher_lib.new(self.kms.get_private_key())
        return cipher.decrypt(data)
